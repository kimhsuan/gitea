on:
  workflow_dispatch:

jobs:
  deploy:
    if: github.ref_name == 'main' || github.ref_name == 'test'
    name: Deploy to ${{ github.ref_name == 'main' && 'prod' || 'test' }} environment
    runs-on: ubuntu-22.04
    environment: ${{ github.ref_name == 'main' && 'prod' || 'test' }}
    permissions:
      contents: read
      id-token: write
    env:
      ENVIRONMENT: ${{ github.ref_name == 'main' && 'prod' || 'test' }}
      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      ORG_NAME: ${{ vars.ORG_NAME }}
      ZONE: ${{ vars.ZONE }}
      SSH_USER: ${{ vars.SSH_USER }}
      DOCKER_COMPOSE_ENV_FILE: ${{ vars.DOCKER_COMPOSE_ENV_FILE }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate required secrets and variables
        run: |
          required_vars=(
            "ENVIRONMENT"
            "SSH_PRIVATE_KEY"
            "SSH_PUBLIC_KEY"
            "PROJECT_ID"
            "ORG_NAME"
            "ZONE"
            "SSH_USER"
            "DOCKER_COMPOSE_ENV_FILE"
          )

          for var in "${required_vars[@]}"; do
            if [ -z "${!var}" ]; then
              echo "Error: Variable or secret '$var' is not set."
              exit 1
            fi
          done

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ vars.PROJECT_ID }}
          workload_identity_provider: ${{ vars.WORKLOAD_IDENTITY_PROVIDER }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 532.0.0

      - name: Setup SSH and Deploy services
        working-directory: ./compose
        run: |
          echo "Setting up SSH keys..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/google_compute_engine
          chmod 600 ~/.ssh/google_compute_engine
          echo "${SSH_PUBLIC_KEY}" > ~/.ssh/google_compute_engine.pub
          chmod 644 ~/.ssh/google_compute_engine.pub

          APP_NAME=${{ vars.APP_NAME || 'gitea' }}
          INSTANCE_NAME=${ORG_NAME}-${APP_NAME}-${ENVIRONMENT}

          echo "Creating directories on the instance..."
          MAX_RETRY=3
          for ((RETRY=1; RETRY<=MAX_RETRY; RETRY++)); do
            gcloud compute ssh ${SSH_USER}@${INSTANCE_NAME} --tunnel-through-iap --quiet \
              --zone ${ZONE} \
              --project ${PROJECT_ID} \
              --command " \
                sudo mkdir -p /data/gitea/{data,config} && \
                sudo chown -R 1000:1000 /data/gitea \
              "
            SSH_EXIT_CODE=$?
            if [[ ${SSH_EXIT_CODE} -eq 0 ]]; then
              echo "Directories created successfully."
              break
            fi
            echo "Failed to create directories. Retrying (${RETRY}/${MAX_RETRY})..."
            sleep 20
          done
          if [[ ${SSH_EXIT_CODE} -ne 0 ]]; then
            echo "Error: Failed to create directories on the instance after ${MAX_RETRY} attempts."
            exit 1
          fi

          echo "Establishing SSH tunnel..."
          MAX_RETRY=3
          for ((RETRY=1; RETRY<=MAX_RETRY; RETRY++)); do
            gcloud compute ssh ${SSH_USER}@${INSTANCE_NAME} --tunnel-through-iap --quiet \
              --zone ${ZONE} \
              --project ${PROJECT_ID} \
              --ssh-flag='-qNf -L 12375:127.0.0.1:2375'
            sleep 5
            TUNNEL_PID=$(pgrep -f "ssh.*12375:127.0.0.1:2375")
            if [[ -n "${TUNNEL_PID}" ]]; then
              echo "SSH tunnel established."
              break
            fi
            echo "SSH tunnel failed to establish. Retrying (${RETRY}/${MAX_RETRY})..."
            sleep 10
          done
          if [[ -z "${TUNNEL_PID}" ]]; then
            echo "Error: SSH tunnel to Docker daemon failed to establish after ${MAX_RETRY} attempts."
            exit 1
          fi
          echo "SSH tunnel established with PID ${TUNNEL_PID}."

          echo "Checking Docker daemon connectivity..."
          MAX_RETRY=3
          for ((RETRY=1; RETRY<=MAX_RETRY; RETRY++)); do
            DOCKER_HOST=tcp://127.0.0.1:12375 docker info > /dev/null 2>&1
            if [[ $? -eq 0 ]]; then
              echo "Docker daemon is reachable."
              break
            fi
            echo "Unable to connect to Docker daemon. Retrying (${RETRY}/${MAX_RETRY})..."
            sleep 10
          done
          if [[ $? -ne 0 ]]; then
            echo "Error: Unable to connect to Docker daemon via SSH tunnel after ${MAX_RETRY} attempts."
            exit 1
          fi

          echo "Deploying Docker Compose services..."
          echo "${DOCKER_COMPOSE_ENV_FILE}" > .env
          DOCKER_HOST=tcp://127.0.0.1:12375 docker compose pull --quiet
          DOCKER_HOST=tcp://127.0.0.1:12375 docker compose up --detach --quiet-pull
